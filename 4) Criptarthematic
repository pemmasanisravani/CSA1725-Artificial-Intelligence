def is_solution_valid(mapping, words, result):
    word_values = [int(''.join(str(mapping[c]) for c in word)) for word in words]
    result_value = int(''.join(str(mapping[c]) for c in result))
    return sum(word_values) == result_value
def solve_cryptarithmetic(words, result):
    all_letters = set(''.join(words + [result]))
    if len(all_letters) > 10:
        return None 
    unique_letters = sorted(all_letters)
    permutations = range(10)
    from itertools import permutations as permute
    for perm in permute(permutations, len(unique_letters)):
        mapping = {letter: digit for letter, digit in zip(unique_letters, perm)}
        if mapping[result[0]] == 0:  # Leading zeros not allowed
            continue
        if is_solution_valid(mapping, words, result):
            return mapping
    return None  
print("First + First = THREE")
words = ['First', 'First']
result = 'THREE'
solution = solve_cryptarithmetic(words, result)
if solution:
    print("Solution found:")
    for letter, digit in solution.items():
        print(f"{letter} = {digit}")
else:
    print("No solution found for the given cryptarithmeticÂ problem.")




    OUTPUT
    First + First = THREE
Solution found:
E = 2
F = 3
H = 0
R = 9
T = 7
i = 5
r = 4
s = 6
t = 1



from itertools import permutations

puzzle = "roads + cross = danger"
words = puzzle.split()
unique_letters = set("".join(words))

for perm in permutations(range(10), len(unique_letters)):
    digit_map = {letter: digit for letter, digit in zip(unique_letters, perm)}
    
    if all(digit_map[word[0]] != 0 for word in words):
        expression = " + ".join("".join(str(digit_map[letter]) for letter in word) for word in words[:-1])
        if eval(expression) == int("".join(str(digit_map[letter]) for letter in words[-1])):
            print("Solution found:")
            for letter, digit in digit_map.items():
                print(f"{letter}: {digit}")
            break
else:
    print("No solution found.")

